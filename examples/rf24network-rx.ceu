#include "wclock.ceu"
#include "spi.ceu"

#ifdef ARDUINO_BOARD_MEGA
#include "pin_10.ceu"
#define NRF_IRQ_PIN PIN_10
#else
#include "pin_02.ceu"
#define NRF_IRQ_PIN PIN_02
#endif

#include "nrf24l01.ceu"
#include "rf24network.ceu"

{
    Serial.begin(9600);
    Serial.println("Ceu - rf24-rx");
    _DELAY(25);
}

native/plain _payload_t;
native/pre do
    typedef struct payload_t {                 // Structure of our payload
        unsigned long ms;
        unsigned long counter;
    } payload_t;

    static RF24Network__Header header;        // If so, grab it and print it out
    static payload_t payload;
end

var Lock spi = _;
spawn Spi();

var Nrf24l01_ nrf = val Nrf24l01_(&spi, 8,7, _,_,_,_,_,_,_);
spawn Nrf24l01(&nrf);
await nrf.ok;

var RF24Network_ net = val RF24Network_(&nrf,{01},_,_,_,_,_,_,_);
spawn RF24Network(&net, 90);
await net.ok;
spawn RF24Network_RX(&net);

every net.rx do
    var _RF24Network__Header&& header = &&net.buf[0] as _RF24Network__Header&&;
    var _payload_t&& payload = &&net.buf[0 + sizeof(_RF24Network__Header)] as _payload_t&&;
    {
        Serial.print("RX #");
        Serial.print(@(payload:counter));
        Serial.print(" at ");
        Serial.println(@(payload:ms));
        _DELAY(20);
    }
end
